Tipos e membros
---

- Classes

	public class Point
	{
		public int X { get; }
		public int Y { get; }
		
		public Point(int x, int y) 
		{
			(X, Y) = (x, y);
		}
	}


- Objetos

	var p1 = new Point(0, 0);
	var p2 = new Point(10, 20);


- Parâmetros de tipo - lista de nomes de parâmetros de tipo entre colchetes angulares

	public class Pair<TFirst, TSecond>
	{
		public TFirst First { get; }
		public TSecond Second { get; }
		
		public Pair(TFirst first, TSecond second)
		{
			(First, Second) = (first, second);
		}
	}


- Classes base

	public class Point3D : Point
	{
		public int Z { get; set; }
		
		public Point3D(int x, int y, int z) : base(x, y)
		{
			Z = z;
		}
	}
	
	Point a = new(10, 20);
	Point b = new Point3D(10, 20, 30);


- Estruturas - não pode derivar outros tipos struct de um tipo struct. Eles estão implicitamente selados.
	
	public struct Point
	{
		public double X { get; }
		public double Y { get; }
		
		public Point(double x, double y) => (X, Y) = (x, y);
	}


- Interfaces - define um contrato que pode ser implementado por classes e structs.


- Enumerações

	public enum VegetaisDeRaiz
	{
		Cebola,
		Cenoura,
		Batata,
		Gengibre
	}
	
	var cebola = VegetaisDeRaiz.Cebola;
	
	
- Tipos anuláveis

	int? optionalInt = default; 
	optionalInt = 5;
	string? optionalText = default;
	optionalText = "Hello World.";
	

- Tuplas - alternativa para a estrutura de dados com vários membros

	(double Sum, int Count) t2 = (4.5, 3);
	Console.WriteLine($"Sum of {t2.Count} elements is {t2.Sum}.");
	//Output:
	//Sum of 3 elements is 4.5.
	